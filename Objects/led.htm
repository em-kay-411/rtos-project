<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\led.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\led.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.02 [Build 28]: Last Updated: Tue Apr 09 11:25:38 2024
<BR><P>
<H3>Maximum Stack Usage =        176 bytes + Unknown(Functions without stacksize, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; OSInit &rArr; OSTmr_Init &rArr; OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[53]">OS_CPU_SR_Save</a>
 <LI><a href="#[54]">OS_CPU_SR_Restore</a>
 <LI><a href="#[72]">OSStartHighRdy</a>
 <LI><a href="#[8a]">OSCtxSw</a>
 <LI><a href="#[6b]">OSIntCtxSw</a>
 <LI><a href="#[b7]">OS_CPU_ARM_ExceptResetHndlr</a>
 <LI><a href="#[4]">OS_CPU_ARM_ExceptUndefInstrHndlr</a>
 <LI><a href="#[5]">OS_CPU_ARM_ExceptSwiHndlr</a>
 <LI><a href="#[6]">OS_CPU_ARM_ExceptPrefetchAbortHndlr</a>
 <LI><a href="#[7]">OS_CPU_ARM_ExceptDataAbortHndlr</a>
 <LI><a href="#[14]">OS_CPU_ARM_ExceptAddrAbortHndlr</a>
 <LI><a href="#[8]">OS_CPU_ARM_ExceptIrqHndlr</a>
 <LI><a href="#[9]">OS_CPU_ARM_ExceptFiqHndlr</a>
 <LI><a href="#[25]">ResetHandler</a>
</UL>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[11]">AppTask0</a> from app.o(i.AppTask0) referenced from app.o(i.AppTaskCreate)
 <LI><a href="#[12]">AppTask1</a> from app.o(i.AppTask1) referenced from app.o(i.AppTaskCreate)
 <LI><a href="#[24]">AppTaskStart</a> from app.o(i.AppTaskStart) referenced from app.o(i.main)
 <LI><a href="#[e]">OSIntExit</a> from os_core.o(i.OSIntExit) referenced from os_cpu_a.o(CODE)
 <LI><a href="#[d]">OSTaskSwHook</a> from os_cpu_c.o(i.OSTaskSwHook) referenced from os_cpu_a.o(CODE)
 <LI><a href="#[13]">OSTmr_Task</a> from os_tmr.o(i.OSTmr_Task) referenced from os_tmr.o(i.OSTmr_InitTask)
 <LI><a href="#[14]">OS_CPU_ARM_ExceptAddrAbortHndlr</a> from os_cpu_a.o(CODE) referenced from os_cpu_c.o(i.OS_CPU_InitExceptVect)
 <LI><a href="#[7]">OS_CPU_ARM_ExceptDataAbortHndlr</a> from os_cpu_a.o(CODE) referenced from vectors.o(VECT)
 <LI><a href="#[7]">OS_CPU_ARM_ExceptDataAbortHndlr</a> from os_cpu_a.o(CODE) referenced from os_cpu_c.o(i.OS_CPU_InitExceptVect)
 <LI><a href="#[9]">OS_CPU_ARM_ExceptFiqHndlr</a> from os_cpu_a.o(CODE) referenced from vectors.o(VECT)
 <LI><a href="#[9]">OS_CPU_ARM_ExceptFiqHndlr</a> from os_cpu_a.o(CODE) referenced from os_cpu_c.o(i.OS_CPU_InitExceptVect)
 <LI><a href="#[8]">OS_CPU_ARM_ExceptIrqHndlr</a> from os_cpu_a.o(CODE) referenced from vectors.o(VECT)
 <LI><a href="#[8]">OS_CPU_ARM_ExceptIrqHndlr</a> from os_cpu_a.o(CODE) referenced from os_cpu_c.o(i.OS_CPU_InitExceptVect)
 <LI><a href="#[6]">OS_CPU_ARM_ExceptPrefetchAbortHndlr</a> from os_cpu_a.o(CODE) referenced from vectors.o(VECT)
 <LI><a href="#[6]">OS_CPU_ARM_ExceptPrefetchAbortHndlr</a> from os_cpu_a.o(CODE) referenced from os_cpu_c.o(i.OS_CPU_InitExceptVect)
 <LI><a href="#[5]">OS_CPU_ARM_ExceptSwiHndlr</a> from os_cpu_a.o(CODE) referenced from vectors.o(VECT)
 <LI><a href="#[5]">OS_CPU_ARM_ExceptSwiHndlr</a> from os_cpu_a.o(CODE) referenced from os_cpu_c.o(i.OS_CPU_InitExceptVect)
 <LI><a href="#[4]">OS_CPU_ARM_ExceptUndefInstrHndlr</a> from os_cpu_a.o(CODE) referenced from vectors.o(VECT)
 <LI><a href="#[4]">OS_CPU_ARM_ExceptUndefInstrHndlr</a> from os_cpu_a.o(CODE) referenced from os_cpu_c.o(i.OS_CPU_InitExceptVect)
 <LI><a href="#[f]">OS_CPU_ExceptHndlr</a> from bsp.o(i.OS_CPU_ExceptHndlr) referenced from os_cpu_a.o(CODE)
 <LI><a href="#[15]">OS_TaskIdle</a> from os_core.o(i.OS_TaskIdle) referenced from os_core.o(i.OS_InitTaskIdle)
 <LI><a href="#[16]">OS_TaskStat</a> from os_core.o(i.OS_TaskStat) referenced from os_core.o(i.OS_InitTaskStat)
 <LI><a href="#[25]">ResetHandler</a> from init.o(INIT) referenced from vectors.o(VECT)
 <LI><a href="#[17]">Tmr_TickISR_Handler</a> from bsp.o(i.Tmr_TickISR_Handler) referenced from bsp.o(i.Tmr_TickInit)
 <LI><a href="#[21]">VIC_DummyEINT0</a> from bsp.o(i.VIC_DummyEINT0) referenced from bsp.o(i.VIC_Init)
 <LI><a href="#[22]">VIC_DummyEINT1</a> from bsp.o(i.VIC_DummyEINT1) referenced from bsp.o(i.VIC_Init)
 <LI><a href="#[23]">VIC_DummyEINT2</a> from bsp.o(i.VIC_DummyEINT2) referenced from bsp.o(i.VIC_Init)
 <LI><a href="#[1e]">VIC_DummyI2C</a> from bsp.o(i.VIC_DummyI2C) referenced from bsp.o(i.VIC_Init)
 <LI><a href="#[1d]">VIC_DummyPWM0</a> from bsp.o(i.VIC_DummyPWM0) referenced from bsp.o(i.VIC_Init)
 <LI><a href="#[20]">VIC_DummyRTC</a> from bsp.o(i.VIC_DummyRTC) referenced from bsp.o(i.VIC_Init)
 <LI><a href="#[1f]">VIC_DummySPI</a> from bsp.o(i.VIC_DummySPI) referenced from bsp.o(i.VIC_Init)
 <LI><a href="#[19]">VIC_DummyTIMER0</a> from bsp.o(i.VIC_DummyTIMER0) referenced from bsp.o(i.VIC_Init)
 <LI><a href="#[1a]">VIC_DummyTIMER1</a> from bsp.o(i.VIC_DummyTIMER1) referenced from bsp.o(i.VIC_Init)
 <LI><a href="#[1b]">VIC_DummyUART0</a> from bsp.o(i.VIC_DummyUART0) referenced from bsp.o(i.VIC_Init)
 <LI><a href="#[1c]">VIC_DummyUART1</a> from bsp.o(i.VIC_DummyUART1) referenced from bsp.o(i.VIC_Init)
 <LI><a href="#[18]">VIC_DummyWDT</a> from bsp.o(i.VIC_DummyWDT) referenced from bsp.o(i.VIC_Init)
 <LI><a href="#[26]">__main</a> from __main.o(!!!main) referenced from init.o(INIT)
 <LI><a href="#[c]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[b]">fputc</a> from uart.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[a]">main</a> from app.o(i.main) referenced from rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[26]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[27]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[29]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[90]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2a]"></a>__scatterload_copy</STRONG> (ARM, 40 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[91]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[2c]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via Veneer)
</UL>

<P><STRONG><a name="[92]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[93]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[94]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[95]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[96]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[97]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[98]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[99]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[9a]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[9b]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[9c]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[9d]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[9e]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[9f]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[a0]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[a1]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[a2]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[a3]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[a4]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[a5]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[30]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via Veneer)
</UL>

<P><STRONG><a name="[a6]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[a7]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[a8]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[a9]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[aa]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[ab]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[28]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[ac]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[ad]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry7.o(.ARM.Collect$$rtentry$$00000007))

<P><STRONG><a name="[2b]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[ae]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[2d]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[af]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[3b]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via Veneer)
</UL>

<P><STRONG><a name="[2f]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via Veneer)
</UL>

<P><STRONG><a name="[b0]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[31]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit (via Veneer)
</UL>

<P><STRONG><a name="[33]"></a>__2printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart (via Veneer)
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask1 (via Veneer)
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask0 (via Veneer)
</UL>

<P><STRONG><a name="[b1]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>__aeabi_idivmod</STRONG> (ARM, 384 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[34]"></a>_printf_char_file</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[35]"></a>_printf_char_common</STRONG> (Thumb, 34 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[36]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[37]"></a>__printf</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, __printf_nopercent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r7
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r5
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[2e]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via Veneer)
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[32]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit (via Veneer)
</UL>

<P><STRONG><a name="[b3]"></a>__I$use$semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[3c]"></a>__aeabi_uidivmod</STRONG> (ARM, 36 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div2
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div5
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tmr_TickInit
</UL>

<P><STRONG><a name="[b6]"></a>__semihosting_library_function</STRONG> (ARM, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>OS_CPU_SR_Save</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PLL_Init
</UL>

<P><STRONG><a name="[54]"></a>OS_CPU_SR_Restore</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PLL_Init
</UL>

<P><STRONG><a name="[72]"></a>OSStartHighRdy</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[8a]"></a>OSCtxSw</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[6b]"></a>OSIntCtxSw</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[b7]"></a>OS_CPU_ARM_ExceptResetHndlr</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE), UNUSED)

<P><STRONG><a name="[4]"></a>OS_CPU_ARM_ExceptUndefInstrHndlr</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR>[Address Reference Count : 2]<UL><LI> os_cpu_c.o(i.OS_CPU_InitExceptVect)
<LI> vectors.o(VECT)
</UL>
<P><STRONG><a name="[5]"></a>OS_CPU_ARM_ExceptSwiHndlr</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR>[Address Reference Count : 2]<UL><LI> os_cpu_c.o(i.OS_CPU_InitExceptVect)
<LI> vectors.o(VECT)
</UL>
<P><STRONG><a name="[6]"></a>OS_CPU_ARM_ExceptPrefetchAbortHndlr</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR>[Address Reference Count : 2]<UL><LI> os_cpu_c.o(i.OS_CPU_InitExceptVect)
<LI> vectors.o(VECT)
</UL>
<P><STRONG><a name="[7]"></a>OS_CPU_ARM_ExceptDataAbortHndlr</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR>[Address Reference Count : 2]<UL><LI> os_cpu_c.o(i.OS_CPU_InitExceptVect)
<LI> vectors.o(VECT)
</UL>
<P><STRONG><a name="[14]"></a>OS_CPU_ARM_ExceptAddrAbortHndlr</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_c.o(i.OS_CPU_InitExceptVect)
</UL>
<P><STRONG><a name="[8]"></a>OS_CPU_ARM_ExceptIrqHndlr</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR>[Address Reference Count : 2]<UL><LI> os_cpu_c.o(i.OS_CPU_InitExceptVect)
<LI> vectors.o(VECT)
</UL>
<P><STRONG><a name="[9]"></a>OS_CPU_ARM_ExceptFiqHndlr</STRONG> (ARM, 0 bytes, Stack size unknown bytes, os_cpu_a.o(CODE))
<BR>[Address Reference Count : 2]<UL><LI> os_cpu_c.o(i.OS_CPU_InitExceptVect)
<LI> vectors.o(VECT)
</UL>
<P><STRONG><a name="[25]"></a>ResetHandler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, init.o(INIT))

<P><STRONG><a name="[4a]"></a>ADCInit</STRONG> (ARM, 68 bytes, Stack size 0 bytes, adc.o(i.ADCInit))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[74]"></a>App_TCBInitHook</STRONG> (ARM, 4 bytes, Stack size 0 bytes, app.o(i.App_TCBInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
</UL>

<P><STRONG><a name="[7a]"></a>App_TaskCreateHook</STRONG> (ARM, 4 bytes, Stack size 0 bytes, app.o(i.App_TaskCreateHook))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
</UL>

<P><STRONG><a name="[7c]"></a>App_TaskIdleHook</STRONG> (ARM, 4 bytes, Stack size 0 bytes, app.o(i.App_TaskIdleHook))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>

<P><STRONG><a name="[7f]"></a>App_TaskStatHook</STRONG> (ARM, 4 bytes, Stack size 0 bytes, app.o(i.App_TaskStatHook))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
</UL>

<P><STRONG><a name="[81]"></a>App_TaskSwHook</STRONG> (ARM, 4 bytes, Stack size 0 bytes, app.o(i.App_TaskSwHook))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
</UL>

<P><STRONG><a name="[8c]"></a>BSP_CPU_PclkFreq</STRONG> (ARM, 128 bytes, Stack size 4 bytes, bsp.o(i.BSP_CPU_PclkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BSP_CPU_PclkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tmr_TickInit
</UL>

<P><STRONG><a name="[47]"></a>BSP_Init</STRONG> (ARM, 44 bytes, Stack size 8 bytes, bsp.o(i.BSP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + Unknown Stack Size
<LI>Call Chain = BSP_Init &rArr; Tmr_TickInit &rArr; BSP_CPU_PclkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_InitExceptVect
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIC_Init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tmr_TickInit
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PLL_Init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[8f]"></a>BSP_IntDisAll</STRONG> (ARM, 16 bytes, Stack size 0 bytes, bsp.o(i.BSP_IntDisAll))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[42]"></a>GetKey</STRONG> (ARM, 184 bytes, Stack size 20 bytes, kbd.o(i.GetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetKey
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kbddelay
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask0
</UL>

<P><STRONG><a name="[48]"></a>InitLCD</STRONG> (ARM, 84 bytes, Stack size 4 bytes, lcd.o(i.InitLCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = InitLCD &rArr; LCD_cmd &rArr; LCD_strobe
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[56]"></a>LCD_cmd</STRONG> (ARM, 48 bytes, Stack size 8 bytes, lcd.o(i.LCD_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_cmd &rArr; LCD_strobe
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_strobe
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLCD
</UL>

<P><STRONG><a name="[57]"></a>LCD_strobe</STRONG> (ARM, 60 bytes, Stack size 4 bytes, lcd.o(i.LCD_strobe))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LCD_strobe
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_cmd
</UL>

<P><STRONG><a name="[4b]"></a>LEDInit</STRONG> (ARM, 24 bytes, Stack size 0 bytes, led.o(i.LEDInit))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[69]"></a>OSDebugInit</STRONG> (ARM, 188 bytes, Stack size 0 bytes, os_dbg.o(i.OSDebugInit))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[59]"></a>OSEventNameSet</STRONG> (ARM, 216 bytes, Stack size 24 bytes, os_core.o(i.OSEventNameSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSEventNameSet
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[5c]"></a>OSInit</STRONG> (ARM, 64 bytes, Stack size 8 bytes, os_core.o(i.OSInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = OSInit &rArr; OSTmr_Init &rArr; OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookEnd
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookBegin
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSDebugInit
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitRdyList
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitMisc
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5d]"></a>OSInitHookBegin</STRONG> (ARM, 16 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHookBegin))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[68]"></a>OSInitHookEnd</STRONG> (ARM, 4 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHookEnd))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[e]"></a>OSIntExit</STRONG> (ARM, 216 bytes, Stack size 8 bytes, os_core.o(i.OSIntExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(CODE)
</UL>
<P><STRONG><a name="[4d]"></a>OSSemCreate</STRONG> (ARM, 156 bytes, Stack size 16 bytes, os_sem.o(i.OSSemCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[44]"></a>OSSemPend</STRONG> (ARM, 384 bytes, Stack size 24 bytes, os_sem.o(i.OSSemPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTOAbort
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask1
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Lock
</UL>

<P><STRONG><a name="[43]"></a>OSSemPost</STRONG> (ARM, 160 bytes, Stack size 16 bytes, os_sem.o(i.OSSemPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask0
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlock
</UL>

<P><STRONG><a name="[71]"></a>OSStart</STRONG> (ARM, 92 bytes, Stack size 8 bytes, os_core.o(i.OSStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSStart
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[73]"></a>OSTCBInitHook</STRONG> (ARM, 24 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTCBInitHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTCBInitHook
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TCBInitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[46]"></a>OSTaskCreate</STRONG> (ARM, 252 bytes, Stack size 48 bytes, os_task.o(i.OSTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OSTaskCreate &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
</UL>

<P><STRONG><a name="[77]"></a>OSTaskCreateExt</STRONG> (ARM, 288 bytes, Stack size 56 bytes, os_task.o(i.OSTaskCreateExt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStkClr
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_InitTask
</UL>

<P><STRONG><a name="[79]"></a>OSTaskCreateHook</STRONG> (ARM, 24 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskCreateHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskCreateHook
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[7b]"></a>OSTaskIdleHook</STRONG> (ARM, 16 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskIdleHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskIdleHook
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskIdleHook
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
</UL>

<P><STRONG><a name="[7d]"></a>OSTaskNameSet</STRONG> (ARM, 220 bytes, Stack size 32 bytes, os_task.o(i.OSTaskNameSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskNameSet
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_InitTask
</UL>

<P><STRONG><a name="[7e]"></a>OSTaskStatHook</STRONG> (ARM, 16 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskStatHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskStatHook
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStatHook
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[80]"></a>OSTaskStkChk</STRONG> (ARM, 212 bytes, Stack size 32 bytes, os_task.o(i.OSTaskStkChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
</UL>

<P><STRONG><a name="[75]"></a>OSTaskStkInit</STRONG> (ARM, 296 bytes, Stack size 12 bytes, os_cpu_c.o(i.OSTaskStkInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[d]"></a>OSTaskSwHook</STRONG> (ARM, 16 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskSwHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskSwHook
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskSwHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(CODE)
</UL>
<P><STRONG><a name="[82]"></a>OSTimeDly</STRONG> (ARM, 176 bytes, Stack size 16 bytes, os_time.o(i.OSTimeDly))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>

<P><STRONG><a name="[41]"></a>OSTimeDlyHMSM</STRONG> (ARM, 168 bytes, Stack size 32 bytes, os_time.o(i.OSTimeDlyHMSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask1
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask0
</UL>

<P><STRONG><a name="[83]"></a>OSTimeTick</STRONG> (ARM, 388 bytes, Stack size 16 bytes, os_core.o(i.OSTimeTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSTimeTick
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tmr_TickISR_Handler
</UL>

<P><STRONG><a name="[67]"></a>OSTmr_Init</STRONG> (ARM, 264 bytes, Stack size 24 bytes, os_tmr.o(i.OSTmr_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = OSTmr_Init &rArr; OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_InitTask
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[f]"></a>OS_CPU_ExceptHndlr</STRONG> (ARM, 84 bytes, Stack size 16 bytes, bsp.o(i.OS_CPU_ExceptHndlr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_CPU_ExceptHndlr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(CODE)
</UL>
<P><STRONG><a name="[4e]"></a>OS_CPU_InitExceptVect</STRONG> (ARM, 120 bytes, Stack size 0 bytes, os_cpu_c.o(i.OS_CPU_InitExceptVect))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[6f]"></a>OS_EventTOAbort</STRONG> (ARM, 128 bytes, Stack size 0 bytes, os_core.o(i.OS_EventTOAbort))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>

<P><STRONG><a name="[70]"></a>OS_EventTaskRdy</STRONG> (ARM, 220 bytes, Stack size 28 bytes, os_core.o(i.OS_EventTaskRdy))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = OS_EventTaskRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>

<P><STRONG><a name="[6d]"></a>OS_EventTaskWait</STRONG> (ARM, 188 bytes, Stack size 0 bytes, os_core.o(i.OS_EventTaskWait))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>

<P><STRONG><a name="[6c]"></a>OS_EventWaitListInit</STRONG> (ARM, 48 bytes, Stack size 0 bytes, os_core.o(i.OS_EventWaitListInit))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>

<P><STRONG><a name="[62]"></a>OS_FlagInit</STRONG> (ARM, 132 bytes, Stack size 16 bytes, os_flag.o(i.OS_FlagInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_FlagInit
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[84]"></a>OS_MemClr</STRONG> (ARM, 36 bytes, Stack size 0 bytes, os_core.o(i.OS_MemClr))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
</UL>

<P><STRONG><a name="[63]"></a>OS_MemInit</STRONG> (ARM, 128 bytes, Stack size 16 bytes, os_mem.o(i.OS_MemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_MemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[64]"></a>OS_QInit</STRONG> (ARM, 88 bytes, Stack size 16 bytes, os_q.o(i.OS_QInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_QInit
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[6e]"></a>OS_Sched</STRONG> (ARM, 164 bytes, Stack size 8 bytes, os_core.o(i.OS_Sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>

<P><STRONG><a name="[5b]"></a>OS_StrCopy</STRONG> (ARM, 52 bytes, Stack size 0 bytes, os_core.o(i.OS_StrCopy))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
</UL>

<P><STRONG><a name="[5a]"></a>OS_StrLen</STRONG> (ARM, 40 bytes, Stack size 0 bytes, os_core.o(i.OS_StrLen))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
</UL>

<P><STRONG><a name="[76]"></a>OS_TCBInit</STRONG> (ARM, 424 bytes, Stack size 40 bytes, os_core.o(i.OS_TCBInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[15]"></a>OS_TaskIdle</STRONG> (ARM, 52 bytes, Stack size 0 bytes, os_core.o(i.OS_TaskIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_TaskIdle &rArr; OSTaskIdleHook
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(i.OS_InitTaskIdle)
</UL>
<P><STRONG><a name="[16]"></a>OS_TaskStat</STRONG> (ARM, 232 bytes, Stack size 0 bytes, os_core.o(i.OS_TaskStat))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TaskStat &rArr; OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(i.OS_InitTaskStat)
</UL>
<P><STRONG><a name="[8b]"></a>OS_TaskStatStkChk</STRONG> (ARM, 108 bytes, Stack size 24 bytes, os_core.o(i.OS_TaskStatStkChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[78]"></a>OS_TaskStkClr</STRONG> (ARM, 44 bytes, Stack size 0 bytes, os_task.o(i.OS_TaskStkClr))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[17]"></a>Tmr_TickISR_Handler</STRONG> (ARM, 28 bytes, Stack size 8 bytes, bsp.o(i.Tmr_TickISR_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Tmr_TickISR_Handler &rArr; OSTimeTick
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(i.Tmr_TickInit)
</UL>
<P><STRONG><a name="[8e]"></a>UART_PutChar</STRONG> (ARM, 72 bytes, Stack size 0 bytes, uart.o(i.UART_PutChar))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[4c]"></a>UartInit</STRONG> (ARM, 140 bytes, Stack size 16 bytes, uart.o(i.UartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = UartInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[39]"></a>__ARM_common_call_via_r5</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, __printf_nopercent.o(i.__ARM_common_call_via_r5))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[38]"></a>__ARM_common_call_via_r7</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, __printf_nopercent.o(i.__ARM_common_call_via_r7))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[b]"></a>fputc</STRONG> (ARM, 28 bytes, Stack size 8 bytes, uart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[49]"></a>kbdInit</STRONG> (ARM, 72 bytes, Stack size 0 bytes, kbd.o(i.kbdInit))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[55]"></a>kbddelay</STRONG> (ARM, 44 bytes, Stack size 0 bytes, kbd.o(i.kbddelay))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
</UL>

<P><STRONG><a name="[58]"></a>lcd_delay</STRONG> (ARM, 44 bytes, Stack size 0 bytes, lcd.o(i.lcd_delay))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_strobe
</UL>

<P><STRONG><a name="[a]"></a>main</STRONG> (ARM, 56 bytes, Stack size 8 bytes, app.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = main &rArr; OSInit &rArr; OSTmr_Init &rArr; OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IntDisAll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[61]"></a>OS_InitEventList</STRONG> (ARM, 132 bytes, Stack size 12 bytes, os_core.o(i.OS_InitEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_InitEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[5e]"></a>OS_InitMisc</STRONG> (ARM, 88 bytes, Stack size 0 bytes, os_core.o(i.OS_InitMisc))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[5f]"></a>OS_InitRdyList</STRONG> (ARM, 88 bytes, Stack size 0 bytes, os_core.o(i.OS_InitRdyList))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[60]"></a>OS_InitTCBList</STRONG> (ARM, 140 bytes, Stack size 12 bytes, os_core.o(i.OS_InitTCBList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_InitTCBList
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[65]"></a>OS_InitTaskIdle</STRONG> (ARM, 92 bytes, Stack size 32 bytes, os_core.o(i.OS_InitTaskIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[66]"></a>OS_InitTaskStat</STRONG> (ARM, 92 bytes, Stack size 32 bytes, os_core.o(i.OS_InitTaskStat))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskStat &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[6a]"></a>OS_SchedNew</STRONG> (ARM, 48 bytes, Stack size 0 bytes, os_core.o(i.OS_SchedNew))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[50]"></a>BSP_MAM_Init</STRONG> (ARM, 32 bytes, Stack size 0 bytes, bsp.o(i.BSP_MAM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[4f]"></a>BSP_PLL_Init</STRONG> (ARM, 192 bytes, Stack size 16 bytes, bsp.o(i.BSP_PLL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = BSP_PLL_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[52]"></a>Tmr_TickInit</STRONG> (ARM, 132 bytes, Stack size 16 bytes, bsp.o(i.Tmr_TickInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = Tmr_TickInit &rArr; BSP_CPU_PclkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CPU_PclkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[8d]"></a>VIC_Dummy</STRONG> (ARM, 12 bytes, Stack size 0 bytes, bsp.o(i.VIC_Dummy))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIC_DummyWDT
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIC_DummyUART1
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIC_DummyUART0
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIC_DummyTIMER1
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIC_DummyTIMER0
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIC_DummySPI
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIC_DummyRTC
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIC_DummyPWM0
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIC_DummyI2C
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIC_DummyEINT2
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIC_DummyEINT1
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIC_DummyEINT0
</UL>

<P><STRONG><a name="[21]"></a>VIC_DummyEINT0</STRONG> (ARM, 16 bytes, Stack size 0 bytes, bsp.o(i.VIC_DummyEINT0))
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIC_Dummy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(i.VIC_Init)
</UL>
<P><STRONG><a name="[22]"></a>VIC_DummyEINT1</STRONG> (ARM, 16 bytes, Stack size 0 bytes, bsp.o(i.VIC_DummyEINT1))
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIC_Dummy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(i.VIC_Init)
</UL>
<P><STRONG><a name="[23]"></a>VIC_DummyEINT2</STRONG> (ARM, 16 bytes, Stack size 0 bytes, bsp.o(i.VIC_DummyEINT2))
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIC_Dummy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(i.VIC_Init)
</UL>
<P><STRONG><a name="[1e]"></a>VIC_DummyI2C</STRONG> (ARM, 16 bytes, Stack size 0 bytes, bsp.o(i.VIC_DummyI2C))
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIC_Dummy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(i.VIC_Init)
</UL>
<P><STRONG><a name="[1d]"></a>VIC_DummyPWM0</STRONG> (ARM, 16 bytes, Stack size 0 bytes, bsp.o(i.VIC_DummyPWM0))
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIC_Dummy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(i.VIC_Init)
</UL>
<P><STRONG><a name="[20]"></a>VIC_DummyRTC</STRONG> (ARM, 16 bytes, Stack size 0 bytes, bsp.o(i.VIC_DummyRTC))
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIC_Dummy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(i.VIC_Init)
</UL>
<P><STRONG><a name="[1f]"></a>VIC_DummySPI</STRONG> (ARM, 16 bytes, Stack size 0 bytes, bsp.o(i.VIC_DummySPI))
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIC_Dummy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(i.VIC_Init)
</UL>
<P><STRONG><a name="[19]"></a>VIC_DummyTIMER0</STRONG> (ARM, 16 bytes, Stack size 0 bytes, bsp.o(i.VIC_DummyTIMER0))
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIC_Dummy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(i.VIC_Init)
</UL>
<P><STRONG><a name="[1a]"></a>VIC_DummyTIMER1</STRONG> (ARM, 16 bytes, Stack size 0 bytes, bsp.o(i.VIC_DummyTIMER1))
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIC_Dummy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(i.VIC_Init)
</UL>
<P><STRONG><a name="[1b]"></a>VIC_DummyUART0</STRONG> (ARM, 16 bytes, Stack size 0 bytes, bsp.o(i.VIC_DummyUART0))
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIC_Dummy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(i.VIC_Init)
</UL>
<P><STRONG><a name="[1c]"></a>VIC_DummyUART1</STRONG> (ARM, 16 bytes, Stack size 0 bytes, bsp.o(i.VIC_DummyUART1))
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIC_Dummy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(i.VIC_Init)
</UL>
<P><STRONG><a name="[18]"></a>VIC_DummyWDT</STRONG> (ARM, 16 bytes, Stack size 0 bytes, bsp.o(i.VIC_DummyWDT))
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIC_Dummy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(i.VIC_Init)
</UL>
<P><STRONG><a name="[51]"></a>VIC_Init</STRONG> (ARM, 120 bytes, Stack size 0 bytes, bsp.o(i.VIC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[85]"></a>OSTmr_InitTask</STRONG> (ARM, 88 bytes, Stack size 32 bytes, os_tmr.o(i.OSTmr_InitTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[88]"></a>OSTmr_Link</STRONG> (ARM, 204 bytes, Stack size 8 bytes, os_tmr.o(i.OSTmr_Link))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTmr_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[86]"></a>OSTmr_Lock</STRONG> (ARM, 32 bytes, Stack size 8 bytes, os_tmr.o(i.OSTmr_Lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSTmr_Lock &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[13]"></a>OSTmr_Task</STRONG> (ARM, 196 bytes, Stack size 8 bytes, os_tmr.o(i.OSTmr_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = OSTmr_Task &rArr; OSTmr_Unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlock
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Lock
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Link
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_tmr.o(i.OSTmr_InitTask)
</UL>
<P><STRONG><a name="[87]"></a>OSTmr_Unlink</STRONG> (ARM, 124 bytes, Stack size 4 bytes, os_tmr.o(i.OSTmr_Unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = OSTmr_Unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[89]"></a>OSTmr_Unlock</STRONG> (ARM, 24 bytes, Stack size 8 bytes, os_tmr.o(i.OSTmr_Unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = OSTmr_Unlock &rArr; OSSemPost &rArr; OS_EventTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[11]"></a>AppTask0</STRONG> (ARM, 104 bytes, Stack size 0 bytes, app.o(i.AppTask0))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = AppTask0 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.AppTaskCreate)
</UL>
<P><STRONG><a name="[12]"></a>AppTask1</STRONG> (ARM, 88 bytes, Stack size 8 bytes, app.o(i.AppTask1))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = AppTask1 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.AppTaskCreate)
</UL>
<P><STRONG><a name="[45]"></a>AppTaskCreate</STRONG> (ARM, 52 bytes, Stack size 8 bytes, app.o(i.AppTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = AppTaskCreate &rArr; OSTaskCreate &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskStart
</UL>

<P><STRONG><a name="[24]"></a>AppTaskStart</STRONG> (ARM, 96 bytes, Stack size 0 bytes, app.o(i.AppTaskStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = AppTaskStart &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kbdInit
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDInit
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLCD
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.main)
</UL>
<P><STRONG><a name="[3f]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[3e]"></a>__arm_div5</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[3d]"></a>__arm_div2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[40]"></a>__arm_div_large</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[c]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[3a]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
